# Templates
snippet temp "template class"
template <class ${1:T}> 
${0}
endsnippet

snippet  tempfunc "template function"
template <typename ${1:T}> 
${0}
endsnippet

snippet tempfuncspec "template function specialization"
template <${1:/*use for partial template specializon*/}>
${2:void} ${3:CLASS_NAME}<${4:double}>${5:function_name}(${6:parameters})
{
	${0}
}
endsnippet

snippet tempspec "template class specialization"
template <${1:/*use for partial template specializon*/}>
class ${2:CLASS_NAME}<${3:Specialization_Type}>
{
	${0}
}
endsnippet

snippet temppointerspec "template class pointer specialization"
template <typename ${1:T}>
class ${2:CLASS_NAME}<$1*>
{
private:
	${3:$1* m_values};
public:
	${4:$2($1* value)};
	${0}
}
endsnippet

# abstract function
snippet fundabs "Abstract function definition"
virtual ${1:void} ${2:function_name}(${3})${4} = 0
{
	/* Default Implementation */
	${5}
}
${0}
endsnippet

# Function Pointers
snippet funcpointer "Function pointer"
${1:returnType} (${2:*ptr2function})(${3:argument types})${0}
endsnippet

# Random Number generator
snippet rand "Random generation with Mersenne Twister"
std::random_device rd;
std::mt19937 gen(rd()); // For distributions, use distro snippets
endsnippet

snippet distrouni "Uniform Distribution"
std::uniform_real_distribution<> ${1:dis}(${2:a}, ${3:b}); // $1(gen) to create random variate
${0}
endsnippet

snippet  distrouniint "uniform integer distribution"
std::uniform_int_distribution<> ${1:dis}(${2:a}, ${3:b}); // uniform in [a, b]. $1(gen) to create random variate
${0}
endsnippet

snippet distrounit "unit normal uniform distribution"
std::generate_canonical<double, ${1:10}> (${1:gen}); // ($1) to create random variate
endsnippet

snippet distrobern	"Bernoulli distribution"
std::bernoulli_distribution ${1:dis}(${2:p}); // $1(gen) to create random variate 
endsnippet

# Getter and Setters
snippet get "Getter"
${1:Type} get${2:Var}() { return m_${3}; }
${0}
endsnippet

snippet set "Setter"
void set${1:var}(${2:Type} &set) {
	m_${3:$1} = set;  }
${0}
endsnippet

# Overwrite default class snippet
snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
private:
	${0:/* data */}
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();
	/* copy constructor default set to public */
	//${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &c1);
};
endsnippet

# INterface class snippet
snippet clI "Interface class"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	virtual ~${1/(\w+).*/$1/} ();
	${2}
};
${0}
endsnippet

# Abstract class snippet
snippet clabs "abstract class"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
protected:
	${1/(\w_).*/$1/}(${2:arguments});
	/* copy constructor default set to public*/
	//${1/(\w+).*/$1/}(const ${1/(\w_).*/$1/} &c1);
	${0:/* data*/}
public:
	${2:virtual ~${1/(\w_).*/$1/} ();}
	// Use pure virtual functions using snippet fundabs
};
endsnippet
# Derived class snippet
snippet clder "derived class"
class ${1:`!p snip.rv = snip.basename or "name"`}: ${2:public} ${3:Parent}
{
private:
	${0:/* data*/}
public:
	${1/(\w_).*/$1/}(${4:arguments}); // make sure to call parent $3(args)
	virtual ~${1/(\w_).*/$1/} ();
	/* copy constructor default set to public*/
	//${1/(\w+).*/$1/}(const ${1/(\w_).*/$1/} &c1);
};
endsnippet

# Operator overloads
snippet overarithequals "operator+= and -= overload"
${1:Type}& operator${2:+=} (${3:Type} ${4:rhs});
${0}
endsnippet

snippet overarith "arithmetic operator overload"
${1:Type} operator${2:+} (${3:$1} &rhs) const;
${0}
endsnippet

snippet overunary "Unary operator overload"
${1:Type} operator${2:-!+}() const;
${0}
endsnippet

snippet oversub  "operator[] overload"
${1:int}& operator[] (const ${2: int} index);
const $1& operator[] (const $2 index) const;
${0}
endsnippet

snippet overout "operator << overload"
friend std::ostream& operator<< (std::ostream &out, const ${1:Type} &${2:type});
${0}
endsnippet

snippet overin "operator >> overload"
friend std::istream& operator>> (std::istream &in, ${1} &${2});
${0}
endsnippet

snippet overequal "operator == overload"
friend bool operator==(const ${1} &lhs, const $1 &rhs);
${0}
endsnippet

snippet overnequal "operator != overload"
friend bool operator!=(const ${1} &lhs, const $1 &rhs);
${0}
endsnippet

snippet overgreater "operator > overload"
friend bool operator>(const ${1} &lhs, const $1 &rhs);
${0}
endsnippet

snippet overgeq "operator >= overload"
friend bool operator>=(const ${1} &lhs, const $1 &rhs);
${0}
endsnippet

snippet overless "operator < overload"
friend bool operator<(const ${1} &lhs, const $1 &rhs);
${0}
endsnippet

snippet overleq "operator <= overload"
friend bool operator<=(const ${1} &lhs, const $1 &rhs);
${0}
endsnippet

snippet overpreinc "++operator overload"
${1: Class}& operator++(); // prefix
${0}
endsnippet

snippet overpredec "--operator overload"
${1: Class}& operator--(); // prefix
${0}
endsnippet

snippet overpostinc "operator++ overload"
${1: Class} operator++(); // postfix
${0}
endsnippet

snippet overpostdec "operator-- overload"
${1: Class} operator--(); // postfix
endsnippet

snippet overpar "operator() overload"
${1: int&} operator()(${2: arguments});
const $1 operator()($2) const;
${0}
endsnippet

snippet overcast "casting operator overload"
operator ${1: int}() const;
${0}
endsnippet

snippet overasign "opeartor= overload"
${1:`!p snip.rv = snip.basename or "name"`} operator= (const $1 &c1)
{
	// self assignment guard
	if (this == &c1)
		return *this;
	
	// do the copy
	${2}
	return *this;
}
${0}
endsnippet

# Functors
snippet functor "Basic functor"
class ${1: Accumulator}
{
private:
	/* Private Members */
	${2: int m_counter = 0;}

public:
	/* Public Members */

	${3: int&} operator() (${4: int i}) { ${5: return }  }
};
${0}
endsnippet

# Casts
snippet sc "Static cast"
static_cast<${1}>(${2})${0}
endsnippet

snippet dca "Dynamic cast"
dynamic_cast<${1:unsigned}>(${2:expr});
if ($3) /* Ensure casting succesful */
	${0}
endsnippet
